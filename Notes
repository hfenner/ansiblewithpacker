## Why Ansible Collections?
- Prior to 2.10, modules were lockstep with the Ansible release cycle.  This meant that module updates only came out when the entirety of Ansible was updated roughly every six months.
- Collections allow for supporting Ansible modules and plugins to be distributed in line with a product release cycle.  This is super useful; for example, if VMWare updates their platform they can release the new and updated modules to support their platform at the time of release rather than having to wait for the next Ansible release.
- This can provide headaches.  Some environments whitelist installed programs and code.  Red Hat offers the Ansible Automation Hub that offers collections that have support while also maintaining Ansible Galaxy for upstream and unsupported collections.  This means that enterprise support is both available and not required.
- Decoupling the content from the core logic is great for increasing release velocity.  However, it potentially risks having modules that get out of sync with Ansible core because they are trying to use deprecated or brand new Ansible features.  There is a galaxy.yml file with metadata describing the collection and the constraints like the version of core Ansible required to help mitigate this.  This should prevent most of the headaches with this distribution model.
